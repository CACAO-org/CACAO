#!/bin/bash

NBARGS=0
ERRORSTATUS="0"
execname="./AOloopControl"








printHELP ()
{
echo
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : SET DM CHANNELS, NO LINK MODE $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo " "
echo " "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [options]"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "   --help -h             print (h)elp and exit"
echo "   --help1               print 1 line summary" 
echo ""
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
	printf "%20s       Setup DM channels, no link mode\n" "$0" 
}




EXITSTATUS=0

function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function checkDir {
if [ -d $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}

function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi
}



# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done



### Start getopts code ###
while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
	if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 





if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo -e \\n"Illegal number of parameters ($NBARGS params required, $# entered)"\\n
fi
printHELP
        exit
fi




# ======================= CHECK REQUIRED DIRS & FILES =================================
echo ""


# ============================= CHECK IF COMMAND EXISTS ==========================












##############################################
# FUNCTION: READ PARAMETER FROM FILE
##############################################
# arg 1: parameter name
# arg 2: default value
# 
# param value is stored in variable "paramvalue"
function ConfReadParam {
file="./conf/param_$1.txt"
if [ -f "$file" ]; then
paramvalue=$( head -1 $file )
else
paramvalue="$2"
echo "$2" > $file
echo "# default value set by function ConfReadParam on $( date -u )" >> $file
fi
}











##########################################
# READ REQUIRED PARAMETERS
##########################################

ConfReadParam DMindex "00"; DMindex="$paramvalue" # DM index 






##########################################
# SETTING UP CONFIGURATION
##########################################

DMMODE="0"
DMMODEfile="conf/param_DMMODE.txt"
echo "$DMMODE" > $DMMODEfile

echo "0" > "./conf/param_DM2DM_mode.txt"
echo "0" > "./conf/param_DMwfsref_mode.txt"
echo "1" > "./conf/param_DMvolt_mode.txt"
echo "0" > "./conf/param_DMcombave_mode.txt"



echo "dm${DMindex}disp03" > ./conf/streamlink_dmC.name.txt # DM control channel
./aolfuncs/aolfunc_StreamLink dmC

echo "dm${DMindex}disp00" > ./conf/streamlink_dmO.name.txt # DM offset channel (flat) 
./aolfuncs/aolfunc_StreamLink dmO

echo "dm${DMindex}disp04" > ./conf/streamlink_dmZP0.name.txt
./aolfuncs/aolfunc_StreamLink dmZP0

echo "dm${DMindex}disp05" > ./conf/streamlink_dmZP1.name.txt
./aolfuncs/aolfunc_StreamLink dmZP1

echo "dm${DMindex}disp06" > ./conf/streamlink_dmZP2.name.txt
./aolfuncs/aolfunc_StreamLink dmZP2

echo "dm${DMindex}disp07" > ./conf/streamlink_dmZP3.name.txt
./aolfuncs/aolfunc_StreamLink dmZP3

echo "dm${DMindex}disp08" > ./conf/streamlink_dmZP4.name.txt
./aolfuncs/aolfunc_StreamLink dmZP4

echo "dm${DMindex}disp09" > ./conf/streamlink_dmZP5.name.txt
./aolfuncs/aolfunc_StreamLink dmZP5

echo "dm${DMindex}disp10" > ./conf/streamlink_dmZP6.name.txt
./aolfuncs/aolfunc_StreamLink dmZP6

echo "dm${DMindex}disp11" > ./conf/streamlink_dmZP7.name.txt
./aolfuncs/aolfunc_StreamLink dmZP7

echo "dm${DMindex}disp" > ./conf/streamlink_dmdisp.name.txt # total DM displacement channel
./aolfuncs/aolfunc_StreamLink dmdisp

echo "dm${DMindex}disp02" > ./conf/streamlink_dmRM.name.txt # DM actuation channel for RM matrix
./aolfuncs/aolfunc_StreamLink dmRM


# remove pre-existing poke patterns
rm ./conf/RMpokeCubeZ.fits.gz
rm ./conf/RMpokeCube.fits.gz
rm respM_LOmodes.fits



