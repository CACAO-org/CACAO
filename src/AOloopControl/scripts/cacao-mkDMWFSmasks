#!/bin/bash


# number of arguments to script
NBARGS=1


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
#echo "pname = $pname"






function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : CREATE/UPDATE AO MASKS $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  updates AO wfs and DM masks"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h] <FPSname>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <FPSname>      Function Parameter Structure (FPS) name"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo "     wfsmask.fits"
echo "     dmmaskRM.fits"
echo "     dmslaved.fits"
echo "     dmmask.fits" 
echo ""
echo "------------------------------------------------------------------------"
}




printHELP1 ()
{
    printf "     $(tput bold)%-25s$(tput sgr0)       Create AO wfs and DM masks\n" "$0" 
}





# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done





while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1)) 






if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi





# arg 1: parameter name
# arg 2: default value
# 
# param value is stored in variable "paramvalue"
function ConfReadParam {
file="./conf/param_$1.txt"
if [ -f "$file" ]; then
paramvalue=$( head -1 $file )
else
paramvalue="$2"
echo "$2" > $file
fi
}





loopnb=$( head -1 LOOPNUMBER )
FPSname=$1
#stageddir=$( head -1 fpsconf/${FPSname}/out/dirname.setval.txt | awk '{print $1;}' )
stageddir=$( grep out.dirname fpslog/fps.${FPSname}.dat |  awk '{print $3;}' )


datestr=`date -u +%Y%m%dT%H%M%S`

DMmaskRMp0=$( grep DMmask.RMp0 fpslog/fps.${FPSname}.dat | awk '{print $3;}' )
DMmaskRMc0=$( grep DMmask.RMc0 fpslog/fps.${FPSname}.dat | awk '{print $3;}' )
DMmaskRMp1=$( grep DMmask.RMp1 fpslog/fps.${FPSname}.dat | awk '{print $3;}' )
DMmaskRMc1=$( grep DMmask.RMc1 fpslog/fps.${FPSname}.dat | awk '{print $3;}' )



WFSmaskRMp0=$( grep WFSmask.RMp0 fpslog/fps.${FPSname}.dat | awk '{print $3;}' )
WFSmaskRMc0=$( grep WFSmask.RMc0 fpslog/fps.${FPSname}.dat | awk '{print $3;}' )
WFSmaskRMp1=$( grep WFSmask.RMp1 fpslog/fps.${FPSname}.dat | awk '{print $3;}' )
WFSmaskRMc1=$( grep WFSmask.RMc1 fpslog/fps.${FPSname}.dat | awk '{print $3;}' )



echo "LOOP: ${loopnb}"




cacao << EOF
cacao.aolnb $loopnb
loadfits "./${stageddir}/zrespM.fits" zrespm
cacaocc.aolRMmkmasks zrespm wfsmap dmmap ${DMmaskRMp0} ${DMmaskRMc0} ${DMmaskRMp1} ${DMmaskRMc1} ${WFSmaskRMp0} ${WFSmaskRMc0} ${WFSmaskRMp1} ${WFSmaskRMc1}
listim
savefits wfsmap "!${stageddir}/wfsmap_mkm.fits"
savefits dmmap "!${stageddir}/dmmap_mkm.fits"
savefits wfsmask "!${stageddir}/wfsmask_mkm.fits"
savefits dmmask "!${stageddir}/dmmask_mkm.fits"
exitCLI
EOF


# register output files to be logged
echo "wfsmap_mkm.fits" >> "${stageddir}/loglist.dat"
echo "dmmap_mkm.fits" >> "${stageddir}/loglist.dat"
echo "wfsmask_mkm.fits" >> "${stageddir}/loglist.dat"
echo "dmmask_mkm.fits" >> "${stageddir}/loglist.dat"




if [ -f "./zrespmtmp/wfsimRMS.fits" ]; then
cacao << EOF
loadfits wfsmask.fits wfsmask0
imref=0*wfsmask0+1
loadfits "./zrespmtmp/wfsimRMS.fits" wfsimrms
imr=wfsmask0/wfsimrms
imr1=imr*wfsmask0
# fraction of pixels in wfsmask0
a1=itot(wfsmask0)/itot(imref)
# goal fraction of pixels
a2=a1*(1.0-$WFSmaskSNRr)
lim=perc(imr1,a2)
imr2=imr1/lim
imtrunc imr2 0.0 1.001 imr3
imr4=floor(imr3)
savefits imr4 "!wfsmask_SNRfilt.fits"  
exitCLI
EOF
cp wfsmask_SNRfilt.fits wfsmask.fits
fi

