#!/bin/bash

# Setup script

# number of arguments to script
NBARGS=0


# 



# ======================= PROCESS NAME =================================
pnameFull=`echo "$0" | sed "s/\.\///g"`
pname=$( basename $pnameFull )
#echo "pname = $pname"




SRCDIR="$CACAO_ROOT"
CURRDIR="$(pwd)"




SETTINGOK="1"  # switches to 0 if settings not OK









function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : cacao setup $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Initial setup for cacao"
echo "  Will create work directory, install scripts and start DMcomb process and links DM to loop"
echo "  Each cacao loop has a unique ASCII name, referred to as <loopname> in this manual."
echo ""
echo ""
echo ""
echo "$(tput bold) SUMMARY: HOW TO SETUP AND START CACAO SESSION ? $(tput sgr0)"
echo ""
echo "[STEP 1] Set essential environment variables"
echo "         Create file $(tput bold)$(tput setaf 2) cacaovars.<loopname>.bash$(tput sgr0)"
echo "         $(tput bold)$(tput setaf 5)\$ source ./cacaovars.<loopname>.bash$(tput sgr0)"
echo ""
echo "[STEP 2] OPTIONAL: Set function parameter values in file $(tput bold)$(tput setaf 2)fpssetup.setval.<loopname>.conf$(tput sgr0)"
echo "         syntax: \"setval <paramfullname> <value>\""
echo ""
echo "[STEP 3] Run setup"
echo "         $(tput bold)$(tput setaf 5)\$ cacao-setup$(tput sgr0)"
echo ""
echo "[STEP 4] Enter the FPS control TUI to control and start processes."
echo "         $(tput bold)$(tput setaf 5)\$ fpsCTRL $(tput sgr0)"
echo ""
echo "[STEP 5] Start cacao control TUI screens tmux session from working directory"
echo "         $(tput bold)$(tput setaf 5)\$ cd <AOloop0> $(tput sgr0)"
echo "         $(tput bold)$(tput setaf 5)\$ cacao.tmux $(tput sgr0)"
echo ""
echo ""
echo "To review settings :"
echo "         $(tput bold)$(tput setaf 5)\$ cacao_setup -p$(tput sgr0)"
echo ""
echo ""
echo "$(tput bold) REQUIRED FOR INITIAL SETUP $(tput sgr0)"
echo "  Essential setup parameters are required prior to setting up the working directory"
echo "  This script depends on these parameters to be set and will return an error message if they are not."
echo "  Essential parameters can be set by environment variables:"
echo "  $ export VAR=\"value\""
echo "  Run with -p option to list current settings without running script."
echo "  For convenience, consider creating bash file and source it before running this script."
echo ""
echo ""
echo "$(tput bold) ADDING FPS-ENABLED PROCESSES (OPTIONAL) $(tput sgr0)"
echo "  Function parameter structures (FPSs) hold values of parameters for frequently used functions."
echo "  A common interface and fifo allows for the parameters to be set or read."
echo "  The user may provide an executable script to add FPS-enabled processes that may run, named:"
echo "    ./<loopname>.fpslistadd.bash"
echo "  The script will add entries to fpslist.txt and issue fps commands."
echo ""
echo ""
echo "$(tput bold) OPTIONAL PARAMETERS $(tput sgr0)"
echo "  Optional parameters can be set after the initial setup"
echo "  They can be provided in user-provided configuration file $pname.conf (relative to current directory)"
echo "  Alternate configuration file specified by -c option"
echo ""
echo ""
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-hCpr]"
echo ""
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)            (h)elp and exit"
echo "     $(tput bold)-C$(tput sgr0)            (C)lear all memory/files and exit"
echo "     $(tput bold)-p$(tput sgr0)            (p)rint parameters and exit"
echo "     $(tput bold)-u$(tput sgr0)            (u)pdate more: do not quit/restart processes"
echo "     $(tput bold)-r$(tput sgr0)            (r)un fps setval updates and exit"
echo ""
echo "------------------------------------------------------------------------"
}

printHELP1 ()
{
    printf "%20s       CACAO setup script\n" "$0" 
}





EXITSTATUS=0


function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}


function checkFileCreate {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 3)$(tput bold)  INFO  $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found: Creating"
    touch $1
fi
}



function checkDir {
if [ -d $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}


function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}


function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi
}












function cacaosimCLEAR {

echo "CLEARING"
cd ${WORKDIR}

if [ -f "./fpscmd/fpsrunstopscript" ]; then
./fpscmd/fpsrunstopscript     # stop all previous FPS run process(es)
fi

if [ -f "./fpscmd/fpsconfstopscript" ]; then
./fpscmd/fpsconfstopscript    # stop FPS CONF process(es)
fi


tmux kill-session -t ${fpsCTRLtmuxname}

cd ${CURRDIR}

}




function fpssetparamconf {

echo ""
echo "FIFO: ${fpsCTRLfifo}"

rm fpssetup.setval.combined.conf
cat ${CURRDIR}/fpssetup.setval.conf ${CURRDIR}/${fpsSETPARAMCONFfile} > fpssetup.setval.combined.conf

while IFS='' read -r line || [[ -n "$line" ]]; do
    echo "$line"
    echo "$line" >> ${fpsCTRLfifo}
done < fpssetup.setval.combined.conf

}





# ================= OPTIONS =============================
# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done


CLEAR="0"
CHECKMODE="0"
FPSSETPARAMCONF="0"
UPDATEMODE="0"

while getopts :hCpru FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    p) # print
    CHECKMODE="1"
    ;;
    C) # clear
    CLEAR="1"
    ;;
    r) # just run fps params setup
    FPSSETPARAMCONF="1"
    ;;
    u)
    UPDATEMODE="1"
    ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done
shift $((OPTIND-1))  




if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi




# ======================= CHECK REQUIRED FILES =================================
echo ""


checkDir $CACAO_ROOT/src/AOloopControl/scripts
checkFile $CACAO_ROOT/src/AOloopControl/scripts/cacao-fpslistadd.bash
checkCommand tmux
checkCommand fpsCTRL
checkCommand milkStreamLink
checkCommand milkFits2shm


echo ""
echo ""
echo "====== REQUIRED ENVIRONMENT VARIABLES ====="


if [[ -z "${CACAO_LOOPNAME}" ]]; then
  echo "CACAO_LOOPNAME   not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  LOOPNAME="$CACAO_LOOPNAME"
  echo "CACAO_LOOPNAME   : ${CACAO_LOOPNAME}"
  echo "$LOOPNAME" > LOOPNAME  
fi

echo "Set by adding \"export VARNAME=\"VALUE\"\" to file cacaovars.${LOOPNAME}.bash"
echo ""

if [[ -z "${CACAO_DMxsize}" ]]; then
  echo "CACAO_DMxsize    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  DMxsize="${CACAO_DMxsize}"
  echo "CACAO_DMxsize    : ${CACAO_DMxsize}"
fi


if [[ -z "${CACAO_DMysize}" ]]; then
  echo "CACAO_DMysize    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  DMysize="${CACAO_DMysize}"
  echo "CACAO_DMysize    : ${CACAO_DMysize}"
fi






if [[ -z "${CACAO_WORKDIR}" ]]; then
  echo "CACAO_WORKDIR    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  WORKDIR="$CACAO_WORKDIR"
  echo "CACAO_WORKDIR    : ${CACAO_WORKDIR}"
fi


if [[ -z "${CACAO_DMINDEX}" ]]; then
  echo "CACAO_DMINDEX    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  DMINDEX="$CACAO_DMINDEX"
  echo "CACAO_DMINDEX    : ${CACAO_DMINDEX}"
fi


if [[ -z "${CACAO_LOOPNUMBER}" ]]; then
  echo "CACAO_LOOPNUMBER not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  LOOPNUMBER="$CACAO_LOOPNUMBER"
  echo "CACAO_LOOPNUMBER : ${CACAO_LOOPNUMBER}"
  echo "$LOOPNUMBER" > LOOPNUMBER
fi




if [[ -z "${CACAO_WFSSTREAM}" ]]; then
  echo "CACAO_WFSSTREAM    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  WFSSTREAM="$CACAO_WFSSTREAM"
  echo "CACAO_WFSSTREAM  : ${CACAO_WFSSTREAM}"
fi







# ======================= FPS PROCESSES =================================
echo ""
echo "============ FPS processes ==========="
echo "Enable FPS process PNAME setup by adding \"export CACAO_FPSPROC_PNAME=\"ON\"\" to file cacaovars.${LOOPNAME}.bash"
echo "Disable by setting to \"OFF\" or unset"
echo ""
printenv | grep CACAO_FPSPROC
echo ""


if [[ ! -z "${CACAO_LOOPNAME}" ]]; then

if [ -f "${LOOPNAME}.fpslistadd.bash" ]; then
echo "Using custom fpslistadd file: ${LOOPNAME}.fpslistadd.bash"
else
echo "Using template fpslistadd script: $CACAO_ROOT/src/AOloopControl/scripts/cacao-fpslistadd.bash"
cp $CACAO_ROOT/src/AOloopControl/scripts/cacao-fpslistadd.bash ${LOOPNAME}.fpslistadd.bash
fi

fi

fpsCTRLtmuxname="${LOOPNAME}_fpsCTRL"

fpsSETPARAMCONFfile="fpssetup.setval.${LOOPNAME}.conf"
checkFileCreate ${fpsSETPARAMCONFfile}

fpsCTRLfifo="${MILK_SHM_DIR}/${fpsCTRLtmuxname}.fifo"




# ======================= CHECK SETTINGOK ===============================
echo ""
echo ""
if [ ${SETTINGOK} -eq 1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Settings OK"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Some settings missing -> cannot proceed"
    EXITSTATUS=1
fi

 
if [ $EXITSTATUS -eq 1 ]; then
echo "$(tput setaf 1)$(tput bold) -> EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi








if [ "${CHECKMODE}" = "1" ]; then
exit
fi




# ======================= SCRIPT CODE STARTS HERE =================================





# ============ CREATE GENERAL PURPOSE TMUX SESSION ============
if [ "$UPDATEMODE" = "0" ]; then
tmux new -d -s cacao-${CACAO_LOOPNAME}
fi






if [ "$CLEAR" = "1" ]; then
cacaosimCLEAR
exit
fi

if [ "$FPSSETPARAMCONF" = "1" ]; then
fpssetparamconf
exit
fi






if [ $CHECKMODE = "1" ]; then
exit
fi


# Create working directory

mkdir -p $WORKDIR
mkdir -p $WORKDIR/conf/
echo "${LOOPNAME}" > ${WORKDIR}/LOOPNAME
echo "${LOOPNUMBER}" > ${WORKDIR}/LOOPNUMBER







# create local fpslist.txt (to be moved to work directory)

if [ "$UPDATEMODE" = "0" ]; then
rm fpslist.txt
touch fpslist.txt


FPSCONFFILE="fpssetup.setval.conf"
rm ${FPSCONFFILE}
touch ${FPSCONFFILE}

echo "# File generated by $0" >> ${FPSCONFFILE}
echo "# Do not edit" >> ${FPSCONFFILE}
echo "" >> ${FPSCONFFILE}
fi


# Write in this file FPS-compatible processes that will be used
# col1: FPS name as it should appear in FPS
# col2: function to be called in cacao to launch process
# col3: optional arg to ensure uniqueness and pass argument to process

# for example:
# echo "DMcomb         aolcontrolDMcomb    $DMINDEX"  > fpslist.txt



## Run script to insert additional FPS-compatible processes that may be used
./${LOOPNAME}.fpslistadd.bash


echo "cp fpslist.txt ${WORKDIR}"
cp fpslist.txt ${WORKDIR}


cd $WORKDIR
# update WORKDIR to full path
WORKDIR=$( pwd )







# Populate work directory with scripts

cd ${SRCDIR}/src/AOloopControl/scripts
./syncscripts -e $WORKDIR
cd $WORKDIR
./syncscripts








# Setup FPS commands for processes we plan to use

if [ "$UPDATEMODE" = "0" ]; then

if [ -f "./fpscmd/fpsrunstopscript" ]; then
./fpscmd/fpsrunstopscript     # stop all previous FPS run process(es)
fi

if [ -f "./fpscmd/fpsconfstopscript" ]; then
./fpscmd/fpsconfstopscript    # stop FPS CONF process(es)
fi

fi









milk-fpsmkcmd                 # (re-)create FPS scripts in `./fpscmd/`

./fpscmd/fpsinitscript        # (re-)create FPS shared memory structure(s)






# start fpsCTRL and conf processes


if [ "$UPDATEMODE" = "0" ]; then
tmux new-session -d -s ${fpsCTRLtmuxname} \; setw force-width 160 \; setw force-height 48 \; attach \; detach
sleep 1
tmux send-keys -t ${fpsCTRLtmuxname} "x" C-m
tmux send-keys -t ${fpsCTRLtmuxname} "TMUX=" C-m   # ensures that tmux sessions can be created from fpsCTRL


rm ${fpsCTRLfifo}
tmux send-keys -t ${fpsCTRLtmuxname} "fpsCTRL -f ${fpsCTRLfifo}" C-m
else
tmux send-keys -t ${fpsCTRLtmuxname} "s"
fi


if [ "$UPDATEMODE" = "0" ]; then
./fpscmd/fpsconfstartscript   # (re-)start FPS configuration process(es)
fi

# give time to fpsCTRL to process above commands
sleep 1

if [ "$UPDATEMODE" = "0" ]; then
# build sym link to output log
echo "logsymlink ${MILK_SHM_DIR}/fpslog.${CACAO_LOOPNAME}" >> ${fpsCTRLfifo}
fi


# ===================================================================================
# ========= INIT SETTINGS IMPORTED FROM CONF FILE ===================================
# ===================================================================================

if [ "$UPDATEMODE" = "0" ]; then
fpssetparamconf


mkdir fpsconf
mkdir fpsconf/AOCONF
echo "${CACAO_DMINDEX}" > ./fpsconf/AOCONF/DMindex.setval.txt
echo "${CACAO_DMxsize}" > ./fpsconf/AOCONF/DMxsize.setval.txt
echo "${CACAO_DMysize}" > ./fpsconf/AOCONF/DMysize.setval.txt
fi


# ===================================================================================
# Startup sequence: establish links
# ===================================================================================

if [ "$UPDATEMODE" = "0" ]; then

# link DM index to loop number
./aolfuncs/aolfunc_setDMnolink

# link WFS
echo "${CACAO_WFSSTREAM}" > ./conf/streamlink.wfsim.name.txt
milkStreamLink -p aol${LOOPNUMBER}_ wfsim

fi


# ===================================================================================
# ======================== START RUN PROCESSES ======================================
# ===================================================================================

# start DM comb
#sleep 5  # TODO why do we need to wait here ?
# echo "runstart DMcomb-${DMINDEX}" >> ${fpsCTRLfifo}


# finished - get back to current directory
cd $CURRDIR




