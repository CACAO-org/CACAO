#!/bin/bash

# Setup script

# number of arguments to script
NBARGS=1


# 
# log messages
LOGFILEDIR="$PWD/log"
mkdir -p $LOGFILEDIR
LOGFILENAME="${LOGFILEDIR}/$(basename $0).log"
rm $LOGFILENAME 2> /dev/null

function echolog {
	echo $1
	echo "$(date -u +"%Y%m%dT%H%M%S.%N %s.%N") $1" >> $LOGFILENAME
}





# ======================= PROCESS NAME =================================
pnameFull=`echo "$0" | sed "s/\.\///g"`
pname=$( basename $pnameFull )
#echo "pname = $pname"




SRCDIR="$CACAO_ROOT"
CURRDIR="$(pwd)"




SETTINGOK="1"  # switches to 0 if settings not OK





USAGESTRING="$(basename $0) [-hCpr] <loopname>"



function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : cacao setup $(tput sgr0)"
echo "source : $0"
echo "------------------------------------------------------------------------"
echo "  Initial setup for cacao"
echo "  Will create work directory, install scripts and start DMcomb process and links DM to loop"
echo "  Each cacao loop has a unique ASCII name, referred to as <loopname> in this manual."
echo ""
echo ""
echo ""
echo "$(tput bold) SUMMARY: HOW TO SETUP AND START CACAO SESSION ? $(tput sgr0)"
echo ""
echo "[STEP 1] Set essential environment variables"
echo "         Create file $(tput bold)$(tput setaf 2) cacaovars.<loopname>.bash$(tput sgr0)"
echo ""
echo "[STEP 2] OPTIONAL: Set function parameter values in file $(tput bold)$(tput setaf 2)fpssetup.setval.<loopname>.conf$(tput sgr0)"
echo "         syntax: \"setval <paramfullname> <value>\""
echo ""
echo "[STEP 3] OPTIONAL: Test setup"
echo "         $(tput bold)$(tput setaf 5)\$ cacao-setup -t <loopname>$(tput sgr0)"
echo ""
echo "[STEP 4] Run setup"
echo "         $(tput bold)$(tput setaf 5)\$ cacao-setup <loopname>$(tput sgr0)"
echo ""
echo "[STEP 5] Start cacao control TUI screens tmux session from working directory"
echo "         $(tput bold)$(tput setaf 5)\$ cd <AOloop0> $(tput sgr0)"
echo "         $(tput bold)$(tput setaf 5)\$ cacao.tmux $(tput sgr0)"
echo ""
echo ""
echo "$(tput bold) ADDING FPS-ENABLED PROCESSES (OPTIONAL) $(tput sgr0)"
echo "  Function parameter structures (FPSs) hold values of parameters for frequently used functions."
echo "  A common interface and fifo allows for the parameters to be set or read."
echo "  The user may provide an executable script to add custom FPS-enabled processes that may run, named:"
echo "    ./<loopname>.fpslistadd.bash"
echo "  The script will add entries to fpslist.txt and issue fps commands."
echo ""
echo ""
echo "$(tput bold) OPTIONAL PARAMETERS $(tput sgr0)"
echo "  Optional parameters can be set after the initial setup"
echo "  They can be provided in user-provided configuration file $pname.conf (relative to current directory)"
echo "  Alternate configuration file specified by -c option"
echo ""
echo ""
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $USAGESTRING"
echo ""
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)            (h)elp and exit"
echo "     $(tput bold)-C$(tput sgr0)            (C)lear all memory/files and exit"
echo "     $(tput bold)-t$(tput sgr0)            (t)est: print parameters and exit (do not start processes)"
echo "     $(tput bold)-u$(tput sgr0)            (u)pdate more: do not quit/restart processes"
echo "     $(tput bold)-e$(tput sgr0)            Create (e)xample cacaovars file and exit"
echo "     $(tput bold)-r$(tput sgr0)            (r)un fps setval updates and exit"
echo ""
echo "------------------------------------------------------------------------"
}

printHELP1 ()
{
    printf "%20s       CACAO setup script\n" "$0" 
}





EXITSTATUS=0


function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}


function checkFileCreate {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 3)$(tput bold)  INFO  $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found: Creating"
    touch $1
fi
}

function checkFileInfoOptional {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 3)$(tput bold)  INFO  $(tput sgr0)] Optional file $(tput bold)$1$(tput sgr0) not found"
fi
}




function checkDir {
if [ -d $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}


function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}


function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi
}






function cacaoCreateExampe_cacaovars {
echo ""
echo "Creating example file cacaovars.example.bash"
echo "Edit and rename file to cacaovars.<loopname>.bash"
echo "Then run :"
echo "$ cacao-setup <loopname>"
echo ""

EXAMPLEFILENAME="cacaovars.example.bash"

echo "# cacao environment variables for setup" >> $EXAMPLEFILENAME
echo "# source this file to take into effect" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "export CACAO_DMxsize=\"188\"" >> $EXAMPLEFILENAME
echo "export CACAO_DMysize=\"1\"" >> $EXAMPLEFILENAME
echo "export CACAO_WORKDIR=\"ao188lhs\"" >> $EXAMPLEFILENAME
echo "export CACAO_DMINDEX=\"02\"" >> $EXAMPLEFILENAME
echo "export CACAO_LOOPNUMBER=\"1\"" >> $EXAMPLEFILENAME
echo "export CACAO_WFSSTREAM=\"aol${CACAO_LOOPNUMBER}_linsimWFS\"" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# ========================================" >> $EXAMPLEFILENAME
echo "# ======= FPS processes to be set up =====" >> $EXAMPLEFILENAME
echo "# ========================================" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# DM combination " >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_DMCOMB=\"ON\"" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# delay stream: emulates time lag in hardware" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_STREAMDELAY=\"ON\"" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# MVM lop on GPU: used to simulate hardware" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_SIMMVMGPU=\"ON\"" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# Measure latency" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_MLAT=\"ON\"" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# WFS acquire frames" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_ACQUWFS=\"ON\"" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# Acquire linear RM" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_ACQLINZRM=\"ON\"" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_ACQLINLORM=\"OFF\"" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# Compute Control Matrix and modes" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_COMPSCM=\"ON\"  # straight CM computation" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_COMPFCM=\"OFF\" # Fourier based CM and modes" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# GPU extract modes from WFS image" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_MODESEXTRACTWFSGPU=\"OFF\"" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME
echo "# AO run loop" >> $EXAMPLEFILENAME
echo "export CACAO_FPSPROC_AOLOOP_RUN=\"ON\"" >> $EXAMPLEFILENAME
echo "" >> $EXAMPLEFILENAME

}





function cacaosimCLEAR {

echolog "CLEARING"
cd ${WORKDIR}


# Stop RUN processes

# try soft stop first (not implemented for all processes)
if [ -f "./fpscmd/fpsrunstopscript" ]; then
./fpscmd/fpsrunstopscript     # stop all previous FPS run process(es)
fi

while IFS='' read -r line || [[ -n "$line" ]]; do
	echo "runstop ${line}" >> ${fpsCTRLfifo}
done < fpscmd/fpslist.txt



# Stop CONF processes

if [ -f "./fpscmd/fpsconfstopscript" ]; then
./fpscmd/fpsconfstopscript    # stop FPS CONF process(es)
fi

while IFS='' read -r line || [[ -n "$line" ]]; do
	echo "confstop ${line}" >> ${fpsCTRLfifo}
done < fpscmd/fpslist.txt


# Remove FPS 
while IFS='' read -r line || [[ -n "$line" ]]; do
    # Erase fps structures    
    echolog "ERASING ${MILK_SHM_DIR}/$line.fps.shm : fpsrm $line ->  ${fpsCTRLfifo}"
	echo "fpsrm $line" >> ${fpsCTRLfifo}
### SHOULD NOT BE REQUIRED:
#	rm ${MILK_SHM_DIR}/$line.fps.shm
done < fpscmd/fpslist.txt



# Exit tmux sessions 
while IFS='' read -r line || [[ -n "$line" ]]; do
tmux send-keys -t ${line}-run "exit" C-m &> /dev/null
tmux send-keys -t ${line}-conf "exit" C-m

### SHOULD NOT BE REQUIRED:
#	tmux kill-session -t ${line}-run
#	tmux kill-session -t ${line}-conf
done < fpscmd/fpslist.txt




rm ${MILK_SHM_DIR}/aol${LOOPNUMBER}_dmC.im.shm
rm ${MILK_SHM_DIR}/aol${LOOPNUMBER}_dmRM.im.shm
rm ${MILK_SHM_DIR}/aol${LOOPNUMBER}_dmO.im.shm
rm ${MILK_SHM_DIR}/aol${LOOPNUMBER}_dmdisp.im.shm
rm ${MILK_SHM_DIR}/aol${LOOPNUMBER}_dmZP*.im.shm
rm ${MILK_SHM_DIR}/aol${LOOPNUMBER}_wfsim.im.shm

tmux send-keys -t cacao-${CACAO_LOOPNAME} "exit" C-m

sleep 1

# Exit fpsCTRL
tmux send-keys -t ${fpsCTRLtmuxname} "x" C-m
tmux send-keys -t ${fpsCTRLtmuxname} "exit" C-m
### SHOULD NOT BE REQUIRED:
#tmux kill-session -t ${fpsCTRLtmuxname}


# remove sym link

file="${MILK_SHM_DIR}/fpslog.${CACAO_LOOPNAME}"
rm $(readlink $file)
rm $file
#rm ${MILK_SHM_DIR}/fpslog.${CACAO_LOOPNAME}
#rm ${MILK_SHM_DIR}/${CACAO_LOOPNAME}_fpsCTRL.fifo


cd ${CURRDIR}

}







function fpssetparamconf {

echo ""
echo "FIFO: ${fpsCTRLfifo}"

rm fpssetup.setval.combined.conf
cat ${CURRDIR}/fpssetup.setval.conf ${CURRDIR}/${fpsSETPARAMCONFfile} > fpssetup.setval.combined.conf
rm ${CURRDIR}/fpssetup.setval.conf

while IFS='' read -r line || [[ -n "$line" ]]; do
    echo "$line"
    echo "$line" >> ${fpsCTRLfifo}
done < fpssetup.setval.combined.conf

}






# ================= OPTIONS =============================
# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done


CLEAR="0"
TESTMODE="0"
FPSSETPARAMCONF="0"
UPDATEMODE="0"

while getopts :heCtru FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    e) # create example
    cacaoCreateExampe_cacaovars
    exit
    ;;
    t) # test mode
    TESTMODE="1"    
    ;;
    C) # clear
    CLEAR="1"
    ;;
    r) # just run fps params setup
    FPSSETPARAMCONF="1"
    ;;
    u)
    UPDATEMODE="1"
    ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done
shift $((OPTIND-1))  




if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
	echo "Usage :"
	echo "  $USAGESTRING"
	echo ""
    exit
fi

CACAO_LOOPNAME="$1"







# ======================= CHECK REQUIRED FILES =================================
echo ""


checkDir $CACAO_ROOT/src/AOloopControl/scripts
checkFile $CACAO_ROOT/src/AOloopControl/scripts/cacao-fpslistadd.bash

checkCommand tmux
checkCommand fpsCTRL
checkCommand milkStreamLink
checkCommand milkFits2shm
checkCommand milk-fpsmkcmd



checkFile cacaovars.${CACAO_LOOPNAME}.bash

if [ $EXITSTATUS -eq 1 ]; then
echo "$(tput setaf 1)$(tput bold) -> EXITING $(tput sgr0)"
exit
else
echo ""
fi


export CACAO_LOOPNAME="$CACAO_LOOPNAME"

source cacaovars.${CACAO_LOOPNAME}.bash



echo ""
echo ""
echo "====== REQUIRED ENVIRONMENT VARIABLES ====="


if [[ -z "${CACAO_LOOPNAME}" ]]; then
  echo "CACAO_LOOPNAME   not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
  LOOPNAMEOK="0"
else
  echo "CACAO_LOOPNAME   : ${CACAO_LOOPNAME}"
  # echo "$CACAO_LOOPNAME" > LOOPNAME  
  LOOPNAMEOK="1"
fi

echo "Set by adding \"export VARNAME=\"VALUE\"\" to file cacaovars.${CACAO_LOOPNAME}.bash"
echo ""

if [[ -z "${CACAO_DMxsize}" ]]; then
  echo "CACAO_DMxsize    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  DMxsize="${CACAO_DMxsize}"
  echo "CACAO_DMxsize    : ${CACAO_DMxsize}"
fi


if [[ -z "${CACAO_DMysize}" ]]; then
  echo "CACAO_DMysize    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  DMysize="${CACAO_DMysize}"
  echo "CACAO_DMysize    : ${CACAO_DMysize}"
fi






if [[ -z "${CACAO_WORKDIR}" ]]; then
  echo "CACAO_WORKDIR    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  WORKDIR="$CACAO_WORKDIR"
  echo "CACAO_WORKDIR    : ${CACAO_WORKDIR}"
fi


if [[ -z "${CACAO_DMINDEX}" ]]; then
  echo "CACAO_DMINDEX    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  DMINDEX="$CACAO_DMINDEX"
  echo "CACAO_DMINDEX    : ${CACAO_DMINDEX}"
fi


if [[ -z "${CACAO_LOOPNUMBER}" ]]; then
  echo "CACAO_LOOPNUMBER not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  LOOPNUMBER="$CACAO_LOOPNUMBER"
  echo "CACAO_LOOPNUMBER : ${CACAO_LOOPNUMBER}"
  # echo "$LOOPNUMBER" > LOOPNUMBER
fi




if [[ -z "${CACAO_WFSSTREAM}" ]]; then
  echo "CACAO_WFSSTREAM    not set -> $(tput setaf 1)$(tput bold) CANNOT PROCEED $(tput sgr0)"
  SETTINGOK="0"
else
  WFSSTREAM="$CACAO_WFSSTREAM"
  echo "CACAO_WFSSTREAM  : ${CACAO_WFSSTREAM}"
fi







# ======================= FPS PROCESSES =================================
echo ""
echo "============ FPS processes ==========="
echo "Enable FPS process PNAME setup by adding \"export CACAO_FPSPROC_PNAME=\"ON\"\" to file cacaovars.${CACAO_LOOPNAME}.bash"
echo "Disable by setting to \"OFF\" or unset"
echo ""
printenv | grep CACAO_FPSPROC
echo ""


if [[ ! -z "${CACAO_LOOPNAME}" ]]; then
checkFileInfoOptional ${CACAO_LOOPNAME}.fpslistadd.bash
#if [ -f "${CACAO_LOOPNAME}.fpslistadd.bash" ]; then
#echo "Using custom fpslistadd file: ${CACAO_LOOPNAME}.fpslistadd.bash"
#else
#echo "Using template fpslistadd script: $CACAO_ROOT/src/AOloopControl/scripts/cacao-fpslistadd.bash"
#cp $CACAO_ROOT/src/AOloopControl/scripts/cacao-fpslistadd.bash ${CACAO_LOOPNAME}.fpslistadd.bash
#fi
fi



fpsCTRLtmuxname="${CACAO_LOOPNAME}_fpsCTRL"

if [ ${LOOPNAMEOK} -eq 1 ]; then
fpsSETPARAMCONFfile="fpssetup.setval.${CACAO_LOOPNAME}.conf"
checkFileInfoOptional ${fpsSETPARAMCONFfile}
fi

fpsCTRLfifo="${MILK_SHM_DIR}/${fpsCTRLtmuxname}.fifo"




# ======================= CHECK SETTINGOK ===============================
echo ""
echo ""
if [ ${SETTINGOK} -eq 1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Settings OK"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Some settings missing -> cannot proceed"
    EXITSTATUS=1
fi

 
if [ $EXITSTATUS -eq 1 ]; then
echo "$(tput setaf 1)$(tput bold) -> EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi








if [ "${TESTMODE}" = "1" ]; then
exit
fi

# log messages
mkdir $LOGFILEDIR
rm $LOGFILENAME


# ======================= SCRIPT CODE STARTS HERE =================================

echolog "START $(basename $0)"
echolog "WORKDIR        : ${WORKDIR}"
echolog "CACAO_LOOPNAME : ${CACAO_LOOPNAME}"
echolog "LOOPNUMBER     : ${LOOPNUMBER}"
echolog "CACAO_ROOT     : ${CACAO_ROOT}"


# ============ CREATE GENERAL PURPOSE TMUX SESSION ============
if [ "$UPDATEMODE" = "0" ]; then
echolog "creating tmux session cacao-${CACAO_LOOPNAME}"
tmux new -d -s cacao-${CACAO_LOOPNAME}
fi






if [ "$CLEAR" = "1" ]; then
echolog "starting cacaosimCLEAR"
cacaosimCLEAR
echolog "END $(basename $0)"
exit
fi

if [ "$FPSSETPARAMCONF" = "1" ]; then
echolog "starting fpssetparamconf"
fpssetparamconf
exit
fi






if [ $CHECKMODE = "1" ]; then
exit
fi


# Create working directory

mkdir -p $WORKDIR
mkdir -p $WORKDIR/conf/
echo "${CACAO_LOOPNAME}" > ${WORKDIR}/LOOPNAME
echo "${LOOPNUMBER}" > ${WORKDIR}/LOOPNUMBER


# Add cacao scripts

mkdir -p $WORKDIR/cacaobin
find $CACAO_ROOT -executable -type f -name "cacao-*" -print0 | xargs -0 -I {} ln -s {} ./$WORKDIR/cacaobin/




# create local fpslist.txt (to be moved to work directory)

if [ "$UPDATEMODE" = "0" ]; then
rm fpslist.txt
touch fpslist.txt


FPSCONFFILE="fpssetup.setval.conf"
rm ${FPSCONFFILE}
touch ${FPSCONFFILE}

echo "# File generated by $0" >> ${FPSCONFFILE}
echo "# Do not edit" >> ${FPSCONFFILE}
echo "" >> ${FPSCONFFILE}
fi


# Write in this file FPS-compatible processes that will be used
# col1: FPS name as it should appear in FPS
# col2: function to be called in cacao to launch process
# col3: optional arg to ensure uniqueness and pass argument to process

# for example:
# echo "DMcomb         aolcontrolDMcomb    $DMINDEX"  > fpslist.txt



## Run script to insert additional FPS-compatible processes that may be used


# cacao-provided default script
$CACAO_ROOT/src/AOloopControl/scripts/cacao-fpslistadd.bash

# additional custom script
./${CACAO_LOOPNAME}.fpslistadd.bash





echolog "mv fpslist.txt ${WORKDIR}"
mv fpslist.txt ${WORKDIR}


cd $WORKDIR
# update WORKDIR to full path
WORKDIR=$( pwd )







# Populate work directory with scripts

cd ${SRCDIR}/src/AOloopControl/scripts
./syncscripts -e $WORKDIR
cd $WORKDIR
./syncscripts








# Setup FPS commands for processes we plan to use

if [ "$UPDATEMODE" = "0" ]; then

if [ -f "./fpscmd/fpsrunstopscript" ]; then
./fpscmd/fpsrunstopscript     # stop all previous FPS run process(es)
fi

if [ -f "./fpscmd/fpsconfstopscript" ]; then
./fpscmd/fpsconfstopscript    # stop FPS CONF process(es)
fi

fi







echolog "running milk-fpsmkcmd"
milk-fpsmkcmd                 # (re-)create FPS scripts in `./fpscmd/`



echolog "running ./fpscmd/fpsinitscript"
./fpscmd/fpsinitscript        # (re-)create FPS shared memory structure(s)




# start fpsCTRL and conf processes


if [ "$UPDATEMODE" = "0" ]; then
#tmux new-session -d -s ${fpsCTRLtmuxname} \;  attach \; detach
tmux new-session -d -s ${fpsCTRLtmuxname} \; setw force-width 160 \; setw force-height 48 \; attach \; detach
sleep 1
tmux send-keys -t ${fpsCTRLtmuxname} "x" C-m
tmux send-keys -t ${fpsCTRLtmuxname} "TMUX=" C-m   # ensures that tmux sessions can be created from fpsCTRL


rm ${fpsCTRLfifo}
tmux send-keys -t ${fpsCTRLtmuxname} "fpsCTRL -f ${fpsCTRLfifo}" C-m
else
tmux send-keys -t ${fpsCTRLtmuxname} "s"
fi


if [ "$UPDATEMODE" = "0" ]; then
./fpscmd/fpsconfstartscript   # (re-)start FPS configuration process(es)
fi

# give time to fpsCTRL to process above commands
sleep 1

if [ "$UPDATEMODE" = "0" ]; then
# build sym link to output log
echo "logsymlink ${MILK_SHM_DIR}/fpslog.${CACAO_LOOPNAME}" >> ${fpsCTRLfifo}
tmux send-keys -t ${fpsCTRLtmuxname} "s" C-m
fi



# ===================================================================================
# ========= INIT SETTINGS IMPORTED FROM CONF FILE ===================================
# ===================================================================================

if [ "$UPDATEMODE" = "0" ]; then
fpssetparamconf

mkdir -p fpsconf
mkdir -p fpsconf/AOCONF
echo "${CACAO_DMINDEX}" > ./fpsconf/AOCONF/DMindex
echo "${CACAO_DMxsize}" > ./fpsconf/AOCONF/DMxsize
echo "${CACAO_DMysize}" > ./fpsconf/AOCONF/DMysize
fi




# ===================================================================================
# Startup sequence: establish links
# ===================================================================================

if [ "$UPDATEMODE" = "0" ]; then

# link DM index to loop number
./aolfuncs/aolfunc_setDMnolink

# link WFS
echo "${CACAO_WFSSTREAM}" > ./conf/streamlink.wfsim.name.txt
milkStreamLink -p aol${LOOPNUMBER}_ wfsim

fi





# ===================================================================================
# ======================== START RUN PROCESSES ======================================
# ===================================================================================

# start DM comb
#sleep 5  # TODO why do we need to wait here ?
# echo "runstart DMcomb-${DMINDEX}" >> ${fpsCTRLfifo}




clear 

echo ""
echo ""
echo "cacao setup complete"
echo ""
echo "Processes :"
echo ""
cat fpscmd/fpslist.txt
echo ""
echo ""
echo "To enter control screen: tmux a -t ${CACAO_LOOPNAME}"
echo ""
echo ""



# finished - get back to current directory
cd $CURRDIR

echolog "END $(basename $0)"
