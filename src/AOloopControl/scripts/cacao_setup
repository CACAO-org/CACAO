#!/bin/bash

# Setup script

# number of arguments to script
NBARGS=0


# ======================= PROCESS NAME =================================
pnameFull=`echo "$0" | sed "s/\.\///g"`
pname=$( basename $pnameFull )
echo "pname = $pname"




SRCDIR="$CACAO_ROOT"
CURRDIR="$(pwd)"
WORKDIR="$CURRDIR/AOloop1"


DMINDEX="01"
LOOPNUMBER="1"
LOOPNAME="cacaoloop"

GPU="0"
LINSIMDT="2000" # simulator frame period [us]

# relative path
LHSRESPM="simLHS/respM.fits"
LHSWFSREF="simLHS/wfsref.fits"



DMxsize="50"
DMysize="50"

if [[ -z "${CACAO_DMxsize}" ]]; then
  echo "CACAO_DMxsize    not set -> using default ${DMxsize}"
else
  DMxsize="${CACAO_DMxsize}"
  echo "CACAO_DMxsize    set =====> ${CACAO_DMxsize}"
fi

if [[ -z "${CACAO_DMysize}" ]]; then
  echo "CACAO_DMysize    not set -> using default ${DMysize}"
else
  DMysize="${CACAO_DMysize}"
  echo "CACAO_DMysize    set =====> ${CACAO_DMysize}"
fi







if [[ -z "${CACAO_WORKDIR}" ]]; then
  echo "CACAO_WORKDIR    not set -> using default ${WORKDIR}"
else
  WORKDIR="$CACAO_WORKDIR"
  echo "CACAO_WORKDIR    set =====> ${CACAO_WORKDIR}"
fi


if [[ -z "${CACAO_DMINDEX}" ]]; then
  echo "CACAO_DMINDEX    not set -> using default ${DMINDEX}"
else
  DMINDEX="$CACAO_DMINDEX"
  echo "CACAO_DMINDEX    set =====> ${CACAO_DMINDEX}"
fi


if [[ -z "${CACAO_LOOPNUMBER}" ]]; then
  echo "CACAO_LOOPNUMBER not set -> using default ${LOOPNUMBER}"
else
  LOOPNUMBER="$CACAO_LOOPNUMBER"
  echo "CACAO_LOOPNUMBER set =====> ${CACAO_LOOPNUMBER}"
fi


if [[ -z "${CACAO_LOOPNAME}" ]]; then
  echo "CACAO_LOOPNAME   not set -> using default ${LOOPNAME}"
else
  LOOPNAME="$CACAO_LOOPNAME"
  echo "CACAO_LOOPNAME   set =====> ${CACAO_LOOPNAME}"
fi





fpsCTRLtmuxname="${LOOPNAME}_fpsCTRL"




function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : cacao setup $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Basic setup for cacao"
echo "  Will start DMcomb process and links DM to loop"
echo ""
echo "  Essential parameters are set by env variable:"
echo "  $ export VAR=\"value\""
echo "   "
echo "  Optional parameters are set in user-provided configuration file $pname.conf (relative to current directory)"
echo "  Alternate configuration file specified by -c option"
echo "  "
echo ""
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-hCp] [-c <conffile>]"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)            (h)elp and exit"
echo "     $(tput bold)-C$(tput sgr0)            (C)lear all memory/files and exit"
echo "     $(tput bold)-p$(tput sgr0)            (p)rint parameters and exit"
echo "     $(tput bold)-c$(tput sgr0) <fname>    Use this (c)onfiguration file"
echo ""
echo ""
echo "------------------------------------------------------------------------"
}

printHELP1 ()
{
    printf "%20s       Example script\n" "$0" 
}





EXITSTATUS=0
function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}
function checkDir {
if [ -d $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}
function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}
function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi
}







function cacaosimCLEAR {


cd ${WORKDIR}

if [ -f "./fpscmd/fpsrunstopscript" ]; then
./fpscmd/fpsrunstopscript     # stop all previous FPS run process(es)
fi

if [ -f "./fpscmd/fpsconfstopscript" ]; then
./fpscmd/fpsconfstopscript    # stop FPS CONF process(es)
fi

tmux kill-session -t DMcomb-${DMINDEX}-conf
tmux kill-session -t DMcomb-${DMINDEX}-run
tmux kill-session -t ${fpsCTRLtmuxname}

cd ${CURRDIR}

}




# ================= OPTIONS =============================
# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done


CHECKMODE="0"
CONFFILE="$pname.conf"

while getopts :hCpc: FLAG; do
  case $FLAG in
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    p) # print
    CHECKMODE="1"
    ;;
    C) # clear
    echo "Clearing all settings"
    cacaosimCLEAR
    exit
    ;;
    c) # user-provided configuration file
    CONFFILE="$OPTARG"
    ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done
shift $((OPTIND-1))  




if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi



# ======================= CHECK REQUIRED FILES =================================
echo ""
LHSRESPM_ABS="${CURRDIR}/${LHSRESPM}"
checkFile ${LHSRESPM_ABS}
LHSWFSREF_ABS="${CURRDIR}/${LHSWFSREF}"
checkFile ${LHSWFSREF_ABS}

checkDir $CACAO_ROOT/src/AOloopControl/scripts

checkCommand tmux
checkCommand fpsCTRL


if [ $EXITSTATUS -eq 1 ]; then
echo ""
echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi



# ======================= SCRIPT CODE STARTS HERE =================================



if [ $CHECKMODE = "1" ]; then
exit
fi


# Create working directory

mkdir -p $WORKDIR
mkdir -p $WORKDIR/conf/


# copy LHS files

cd $WORKDIR
# update WORKDIR to full path
WORKDIR=$( pwd )





# Populate work directory with scripts

cd ${SRCDIR}/src/AOloopControl/scripts
./syncscripts -e $WORKDIR
cd $WORKDIR
./syncscripts

echo "$LOOPNUMBER" > LOOPNUMBER
echo "$LOOPNAME" > LOOPNAME






# Setup FPS commands for processes we plan to use

if [ -f "./fpscmd/fpsrunstopscript" ]; then
./fpscmd/fpsrunstopscript     # stop all previous FPS run process(es)
fi

if [ -f "./fpscmd/fpsconfstopscript" ]; then
./fpscmd/fpsconfstopscript    # stop FPS CONF process(es)
fi



# Write in this file FPS-compatible processes that will be used
# col1: FPS name as it should appear in FPS
# col2: function to be called in cacao to launch process
# col3: optional arg to ensure uniqueness and pass argument to process
echo "DMcomb         aolcontrolDMcomb    $DMINDEX"  > fpslist.txt
#echo "mlat           aoltestlat" >> fpslist.txt




fpsmkcmd                      # (re-)create FPS scripts in `./fpscmd/`
./fpscmd/fpsinitscript        # (re-)create FPS shared memory structure(s)






# start fpsCTRL and conf processes


fpsCTRLfifo="${MILK_SHM_DIR}/${fpsCTRLtmuxname}.fifo"
tmux new-session -d -s ${fpsCTRLtmuxname} \; setw force-width 160 \; setw force-height 48 \; attach \; detach
sleep 1
tmux send-keys -t ${fpsCTRLtmuxname} "x" C-m
tmux send-keys -t ${fpsCTRLtmuxname} "TMUX=" C-m   # ensures that tmux sessions can be created from fpsCTRL


tmux send-keys -t ${fpsCTRLtmuxname} "fpsCTRL -f ${fpsCTRLfifo}" C-m



./fpscmd/fpsconfstartscript   # (re-)start FPS configuration process(es)




# ===================================================================================
# ============== DEFAULT SETTINGS AND ENV VARIABLES =================================
# ===================================================================================

# DM
echo "setval AOCONF.DMxsize ${DMxsize}" >> ${fpsCTRLfifo}
echo "setval AOCONF.DMysize ${DMysize}" >> ${fpsCTRLfifo}




# give time to fpsCTRL to process above commands
sleep 1



# ===================================================================================
# ========= OPTIONAL ADDITIONAL SETTINGS IMPORTED FROM CONF FILE ====================
# ===================================================================================




while IFS='' read -r line || [[ -n "$line" ]]; do
    echo "$line"
    echo "$line" >> ${fpsCTRLfifo}
done < ${CURRDIR}/$CONFFILE






# ===================================================================================
# Startup sequence
# ===================================================================================

# link DM index to loop number
./aolfuncs/aolfunc_setDMnolink






# ===================================================================================
# ======================== START RUN PROCESSES ======================================
# ===================================================================================

# start DM comb
sleep 5  # TODO why do we need to wait here ?
echo "runstart DMcomb-${DMINDEX}" >> ${fpsCTRLfifo}


# finished - get back to current directory
cd $CURRDIR




