#!/bin/bash

MSdescr="SELECT WFS FRAMES FROM PSF TELEMETRY (LOOP)"

MSextdescr="Select WFS frames from times at which PSF is best
Requires synchronized data cubes created by cacao-syncStreams

Evaluation modes:
  0: optimize flux concentration
  1: maximize flux
  2: minimize flux
"


# Defaults
timespan="100" # second
timestart=$(date "+%s")



source milk-script-std-config

RequiredCommands=( cacao )
RequiredFiles=()
RequiredDirs=()




# SCRIPT ARGUMENTS (mandatory)
# syntax: "name:type(s)/test(s):description"
MSarg+=( "logdir:string:telemetry directory" )
MSarg+=( "streamWFS:string:WFS stream" ) 
MSarg+=( "streamPSF:string:PSF stream" ) 
MSarg+=( "selfrac:float:selection fraction" )
MSarg+=( "x0:long:selection window x start" )
MSarg+=( "x1:long:selection window x end" )
MSarg+=( "y0:long:selection window y start" )
MSarg+=( "y1:long:selection window x end" )
MSarg+=( "emode:long:Evaluation mode" )
MSarg+=( "texp:float:exposure time in sec" )
MSarg+=( "dtlag:float:time offset between streams in sec" )



# SCRIPT OPTIONS
# syntax: "short:long:functioncall:args[types]:description"
MSopt+=( "t:starttime:setstarttime:time[unixsec]:set start time in unix time" )
function setstarttime()
{
	timestart=$1
}

MSopt+=( "s:timespan:settimespan:span[sec]:set time span" )
function setstarttime()
{
	timespan=$1
}



source milk-argparse

echo "start time : ${timestart}"

# load arguments
logdirectory="${inputMSargARRAY[0]}"
streamWFS="${inputMSargARRAY[1]}"
streamPSF="${inputMSargARRAY[2]}"
selFrac="${inputMSargARRAY[3]}"
windowx0="${inputMSargARRAY[4]}"
windowx1="${inputMSargARRAY[5]}"
windowy0="${inputMSargARRAY[6]}"
windowy1="${inputMSargARRAY[7]}"
evalMode="${inputMSargARRAY[8]}"
texp="${inputMSargARRAY[9]}"
dtlag="${inputMSargARRAY[10]}"



datestr=`date -u +%Y%m%d`
streamWFSdir="${logdirectory}/${datestr}/${streamWFS}"
streamPSFdir="${logdirectory}/${datestr}/${streamPSF}"


iter=0
iter0=0

echo "streamWFSdir : ${streamWFSdir}"
echo "streamPSFdir : ${streamPSFdir}"

checkDir ${streamWFSdir}
checkDir ${streamPSFdir}


exit

streamWFS="$1"
streamPSF="$2"

# number of arguments to script
NBARGS=11





# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
echo "pname = $pname"


function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : SELECT WFS FRAMES FROM PSF TELEMETRY (LOOP) $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Select WFS frames from times at which PSF is best"
echo "  Requires synchronized data cubes created by cacao-syncStreams"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-hst] <logdirectory> <streamWFS> <streamPSF> <Selection fraction> <x0> <x1> <y0> <y1> <evalMode> <texp> <dtlag>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo "     $(tput bold)-n$(tput sgr0)          number of iteration (default 0=inf)"
echo "     $(tput bold)-s$(tput sgr0)          time (s)pan (default 100s)"
echo "     $(tput bold)-t$(tput sgr0)          start (t)ime (default=now)"
echo "     $(tput bold)-a$(tput sgr0)          alpha norm (default=2.0)"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <streamWFS>         WFC stream name"
echo "     <streamPSF>         PSF stream name"
echo "     <x0><x1><y0><y1>    PSF evaluation window"
echo "     <evalMode>            0: optimize flux concentration"
echo "                           1: maximize flux"
echo "                           2: minimize flux"
echo "     <texp>              resampled exposure time"
echo "     <dtlag>             lag time"
echo ""
echo " $(tput bold)EXAMPLE:$(tput sgr0)"
echo "     $0 \"/media/data\" aol0_wfsim aol0_psf 0 64 0 64 0 0.001 0.001"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo "     impsfbest.fits     Average of selected PSF frames"
echo "     impsfall.fits      Average of all PSF frames"
echo "     imwfsbest.fits     Average of selected WFS frames"
echo "     imwfsall.fits      Average of all WFS frames"
echo ""
echo "------------------------------------------------------------------------"
}



printHELP1 ()
{
	printf "%20s       Select WFS frames from best PSF frames\n" "$0" 
}


# ================= OPTIONS =============================




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done


timespan="100" # second
timestart=$(date "+%s")
NBiter="0" # infinite loop

ALPHAnorm="2.0"

#Parse command line flags
#If an option should be followed by an argument, it should be followed by a ":".
#Notice there is no ":" after "h". The leading ":" suppresses error messages from
#getopts. This is required to get unrecognized option code to work.

while getopts :hH:s:t:n:a: FLAG; do
  case $FLAG in
    H) # detailed help
    if [ "$OPTARG" == "cf" ]; then
    printHELP_confFILES
    exit
    fi
    echo "ERROR: choice $OPTARG not recognized"
    exit
    ;;
    s)
    timespan=$OPTARG
    ;;
    t)
    timestart=$OPTARG
    ;;
    n)
    NBiter=$OPTARG
    ;;
    a)
    ALPHAnorm="$OPTARG"
    ;;
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

### End getopts code ###





if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi







logdirectory="$1"
streamWFS="$2"
streamPSF="$3"
selFrac="$4"
windowx0="$5"
windowx1="$6"
windowy0="$7"
windowy1="$8"
evalMode="$9"
texp="${10}"
dtlag="${11}"

datestr=`date -u +%Y%m%d`
streamWFSdir="$logdirectory/$datestr/$streamWFS"
streamPSFdir="$logdirectory/$datestr/$streamPSF"


iter=0
iter0=0

echo "streamWFSdir : ${streamWFSdir}"
echo "streamPSFdir : ${streamPSFdir}"

checkDir ${streamWFSdir}
checkDir ${streamPSFdir}

exit



while :
do
let iter++

echo "WFSdir = $streamWFSdir"
ls $streamWFSdir/*.dat $streamWFSdir/*.txt 2> /dev/null | tail -n 1
lastLogFileWFS=$(ls $streamWFSdir/*.dat $streamWFSdir/*.txt 2> /dev/null | tail -n 1)
echo "Last WFS file = $lastLogFileWFS"
cp $lastLogFileWFS _lastlogfileWFS

echo "PSFdir = $streamPSFdir"
ls $streamPSFdir/*.dat $streamPSFdir/*.txt 2> /dev/null | tail -n 1
lastLogFilePSF=$(ls $streamPSFdir/*.dat $streamPSFdir/*.txt 2> /dev/null | tail -n 1)
echo "Last PSF file = $lastLogFilePSF"
cp $lastLogFilePSF _lastlogfilePSF

timeend=$((timestart + timespan))

echo "TIME : $timestart -> $timeend ====================================="


vOK="1"


lastLogTimeWFS=$( cat _lastlogfileWFS | tail -n 1 | awk '{print int($4)}' )
echo "WFS last log at $lastLogTimeWFS"

if [ "$lastLogTimeWFS" -lt "$timeend" ]; then
vOK="0"
fi


lastLogTimePSF=$( cat _lastlogfilePSF | tail -n 1 | awk '{print int($4)}' )
echo "PSF last log at $lastLogTimePSF"

if [ "$lastLogTimePSF" -lt "$timeend" ]; then
vOK="0"
fi


if [ "$vOK" = "1" ]; then


echo "=================================================================== PROCESSING -> "


# generate synchronized cubes
cacao-syncStreams "$logdirectory/$datestr" $streamWFS $streamPSF $timestart $timeend  $texp $dtlag

# generate selection
cacao-selectWFSframes -a $ALPHAnorm $streamWFS.sync.fits $streamPSF.sync.fits $selFrac $windowx0 $windowx1 $windowy0 $windowy1 $evalMode


cacao << EOF
readshmim aol0_wfsmask
loadfits "imwfsbest.fits" imwfs
readshmim aol0_wfsdark
imwfs0=imwfs-aol0_wfsdark
imwfs0m=imwfs0*aol0_wfsmask
#totm=itot(aol0_wfsmask)
totm=itot(imwfs0m)
imwfs0n=imwfs0/totm
readshmim aol0_wfsref
savefits aol0_wfsref "!aol0_wfsref.fits"
savefits imwfs0n "!imwfs0n.fits"
cpsh imwfs0n aol0_wfsref
exitCLI
EOF



fname="$(printf "imwfsbest.%06d.fits" $iter0 )"
cp imwfsbest.fits $fname
fname="$(printf "imwfsall.%06d.fits" $iter0 )"
cp imwfsall.fits $fname

fname="$(printf "impsfbest.%06d.fits" $iter0 )"
cp impsfbest.fits $fname
fname="$(printf "impsfall.%06d.fits" $iter0 )"
cp impsfall.fits $fname

timestart=${timeend}
let iter0++

else
echo "WAITING. .."
sleep 2
fi


if [ "$iter" -eq "$NBiter" ]; then
exit
fi


done


