#!/bin/bash

streamWFS="$1"
streamPSF="$2"

# number of arguments to script
NBARGS=9



# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
echo "pname = $pname"


function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : SELECT WFS FRAMES FROM PSF TELEMETRY (LOOP) $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Select WFS frames from times at which PSF is best"
echo "  Requires synchronized data cubes created by cacao-syncStreams"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h] <logdirectory> <streamWFS> <streamPSF> <Selection fraction> <x0> <x1> <y0> <y1> <Mode>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <streamWFS>         WFC stream name"
echo "     <streamPSF>         PSF stream name"
echo "     <x0><x1><y0><y1>    PSF evaluation window"
echo "     <evalMode>          0: optimize flux concentration"
echo "                         1: maximize flux"
echo "                         2: minimize flux"
echo ""
echo " $(tput bold)EXAMPLE:$(tput sgr0)"
echo "     $0 aol0_wfsim aol0_psf 0 64 0 64 0"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo "     impsfbest.fits     Average of selected PSF frames"
echo "     impsfall.fits      Average of all PSF frames"
echo "     imwfsbest.fits     Average of selected WFS frames"
echo "     imwfsall.fits      Average of all WFS frames"
echo ""
echo "------------------------------------------------------------------------"
}



printHELP1 ()
{
	printf "%20s       Select WFS frames from best PSF frames\n" "$0" 
}


# ================= OPTIONS =============================




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done




#Parse command line flags
#If an option should be followed by an argument, it should be followed by a ":".
#Notice there is no ":" after "h". The leading ":" suppresses error messages from
#getopts. This is required to get unrecognized option code to work.

while getopts :hH:L:N:Cc FLAG; do
  case $FLAG in
    H) # detailed help
    if [ "$OPTARG" == "cf" ]; then
    printHELP_confFILES
    exit
    fi
    echo "ERROR: choice $OPTARG not recognized"
    exit
    ;;
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

### End getopts code ###





if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi



logdirectory="$1"
stream0="$2"
stream1="$3"
datestr=`date -u +%Y%m%d`
stream0dir="$logdirectory/$datestr/$stream0"
stream1dir="$logdirectory/$datestr/$stream1"


echo "dir = $stream0dir"
ls $stream0dir/*.dat | tail -n 1

lastFile=$(ls $stream0dir/*.dat $stream0dir/*.txt | tail -n 1)

echo "Last file = $lasfFile"


