#!/bin/bash

streamWFS="$1"
streamPSF="$2"

# number of arguments to script
NBARGS=11


timespan="30" # second


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
echo "pname = $pname"


function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : SELECT WFS FRAMES FROM PSF TELEMETRY (LOOP) $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Select WFS frames from times at which PSF is best"
echo "  Requires synchronized data cubes created by cacao-syncStreams"
echo "   "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-h] <logdirectory> <streamWFS> <streamPSF> <Selection fraction> <x0> <x1> <y0> <y1> <evalMode> <texp> <dtlag>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <streamWFS>         WFC stream name"
echo "     <streamPSF>         PSF stream name"
echo "     <x0><x1><y0><y1>    PSF evaluation window"
echo "     <evalMode>            0: optimize flux concentration"
echo "                           1: maximize flux"
echo "                           2: minimize flux"
echo "     <texp>              resampled exposure time"
echo "     <dtlag>             lag time"
echo ""
echo " $(tput bold)EXAMPLE:$(tput sgr0)"
echo "     $0 \"/media/data\" aol0_wfsim aol0_psf 0 64 0 64 0 0.001 0.001"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo "     impsfbest.fits     Average of selected PSF frames"
echo "     impsfall.fits      Average of all PSF frames"
echo "     imwfsbest.fits     Average of selected WFS frames"
echo "     imwfsall.fits      Average of all WFS frames"
echo ""
echo "------------------------------------------------------------------------"
}



printHELP1 ()
{
	printf "%20s       Select WFS frames from best PSF frames\n" "$0" 
}


# ================= OPTIONS =============================




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1") 
set -- "$@" "-h" 
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done




#Parse command line flags
#If an option should be followed by an argument, it should be followed by a ":".
#Notice there is no ":" after "h". The leading ":" suppresses error messages from
#getopts. This is required to get unrecognized option code to work.

while getopts :hH:L:N:Cc FLAG; do
  case $FLAG in
    H) # detailed help
    if [ "$OPTARG" == "cf" ]; then
    printHELP_confFILES
    exit
    fi
    echo "ERROR: choice $OPTARG not recognized"
    exit
    ;;
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

### End getopts code ###





if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi




timestart=$(date "+%s")


logdirectory="$1"
streamWFS="$2"
streamPSF="$3"
selFrac="$4"
windowx0="$5"
windowx1="$6"
windowy0="$7"
windowy1="$8"
evalMode="$9"
texp="$10"
dtlag="$11"

datestr=`date -u +%Y%m%d`
streamWFSdir="$logdirectory/$datestr/$streamWFS"
streamPSFdir="$logdirectory/$datestr/$streamPSF"



while :
do

echo "WFSdir = $streamWFSdir"
ls $streamWFSdir/*.dat $streamWFSdir/*.txt 2> /dev/null | tail -n 1
lastLogFileWFS=$(ls $streamWFSdir/*.dat $streamWFSdir/*.txt 2> /dev/null | tail -n 1)
echo "Last WFS file = $lastLogFileWFS"
cp $lastLogFileWFS _lastlogfileWFS

echo "PSFdir = $streamPSFdir"
ls $streamPSFdir/*.dat $streamPSFdir/*.txt 2> /dev/null | tail -n 1
lastLogFilePSF=$(ls $streamPSFdir/*.dat $streamPSFdir/*.txt 2> /dev/null | tail -n 1)
echo "Last PSF file = $lastLogFilePSF"
cp $lastLogFilePSF _lastlogfilePSF

timeend=$((timestart + timespan))

echo "TIME : $timestart -> $timeend ====================================="


vOK="1"


lastLogTimeWFS=$( cat _lastlogfileWFS | tail -n 1 | awk '{print int($4)}' )
echo "WFS last log at $lastLogTimeWFS"

if [ "$lastLogTimeWFS" -lt "$timeend" ]; then
vOK="0"
fi


lastLogTimePSF=$( cat _lastlogfilePSF | tail -n 1 | awk '{print int($4)}' )
echo "PSF last log at $lastLogTimePSF"

if [ "$lastLogTimePSF" -lt "$timeend" ]; then
vOK="0"
fi


if [ "$vOK" = "1" ]; then


echo "=================================================================== PROCESSING -> "
timestart=${timeend}

# generate synchronized cubes
cacao-syncStreams "$logdirectory" $streamWFS $streamPSF $timestart $timeend  $texp $dtlag

# generate selection
cacao-selectWFSframes $streamWFS.sync.fits $streamPSF.sync.fits $selFrac $windowx0 $windowx1 $windowy0 $windowy1 $evalMode

else
echo "WAITING. .."
sleep 2
fi






done


