#!/bin/bash


# number of arguments to script


MSdescr="SYNCHRONIZE DATA STREAMS"

MSextdescr="Synchronize and resample streams (postprocessing)

Evaluation modes:
  0: optimize flux concentration
  1: maximize flux
  2: minimize flux

EXAMPLE:
$0 \"/media/data\" aol0_wfsim aol0_psf 0 64 0 64 0 0.001 0.001


INPUT
	directory   data directory, will look for files in /dir/streamname/
	streamWFS 
	streamPSF
	tstart      start time, Unix seconds
	tend        end time, Unix second 
	dtsample    output sample interval 
	dtlag 		Lag between streamWFS and streamPSF. streamPSF later
	
OPTIONAL INPUT 
	<streamWFS>.dark.fits
	<streamPSF>.fark.fits 
	
EXAMPLE 
	$0 \"/media/data/20180628/\" streamWFS streamPSF 1530180589.0 1530180589.8 0.0002 0.000556

OUTPUT:
     streamWFS-sync.fits 		Synchronized WFS cube file

"


# Defaults
dtsample="100" # second
tstart=$(date "+%s")


source milk-script-std-config

RequiredCommands=( cacao )
RequiredFiles=()
RequiredDirs=()




# SCRIPT ARGUMENTS (mandatory)
# syntax: "name:type(s)/test(s):description"
MSarg+=( "logdir:string:telemetry directory" )
MSarg+=( "streamWFS:string:WFS stream" ) 
MSarg+=( "streamPSF:string:PSF stream" ) 

MSarg+=( "tstart:float: start time" )
MSarg+=( "tstop:float:stop time" )
MSarg+=( "dtsample:float:exposure time per output frame" )
MSarg+=( "dtlag:float:time offset between streams in sec" )




source milk-argparse


# load arguments
directory="$1"
streamWFS="$2"
streamPSF="$3"
tstart="$4"
tstop="$5"
dtsample="$6"
dtlag="$7"





cacao << EOF
cacaopt.aolptmksyncs2 "$directory" ${stream0} ${stream1} ${tstart} ${tstop} ${dtsample} ${dtlag}
savefits outC0 "!${stream0}.sync.fits"
savefits outC1 "!${stream1}.sync.fits"
listim
exitCLI
EOF




# subtract dark if it exists

if [ -f "${stream0}.dark.fits" ]; then
cacao << EOF
loadfits "${stream0}.dark.fits" stream0dark
loadfits "${stream0}.sync.fits" outC0
outC0c=outC0-stream0dark
savefits outC0c "!${stream0}.syncC.fits"
exitCLI
EOF
mv ${stream0}.syncC.fits ${stream0}.sync.fits
fi


if [ -f "${stream1}.dark.fits" ]; then
cacao << EOF
loadfits "${stream1}.dark.fits" stream1dark
loadfits "${stream1}.sync.fits" outC1
outC1c=outC1-stream0dark
savefits outC1c "!${stream1}.syncC.fits"
exitCLI
EOF
mv ${stream1}.syncC.fits ${stream1}.sync.fits
fi


